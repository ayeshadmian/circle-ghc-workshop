Description:
  This template sets up the workshop application on an AutoScaling group,
  behind an Application Load Balancer, with a CodeDeploy application.
  The workshop will need one stack of this template per team.

Parameters:
  SharedResourceStack:
    Description: Name of an active CloudFormation stack that contains the shared workshop resources, such as the VPC.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: GraceHopperWorkshopSharedResources
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2"

Resources:
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:CodeDeployApplication"
      ServiceRoleArn:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:CodeDeployRole"
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
      - Ref: AutoScalingGroup

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PrivateHttpIngressSecurityGroup"
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:InstanceProfile"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          cd /home/ec2-user
          curl -O https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      MinSize: 3
      MaxSize: 3
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        Fn::Split:
        - ","
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PrivateSubnets"
      TargetGroupARNs:
        - Ref: LoadBalancerTargetGroup
      Tags:
        - Key: Name
          Value:
            Fn::ImportValue:
              !Sub "${SharedResourceStack}:WorkshopName"
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn:
            Ref: LoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Fn::Split:
        - ","
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PublicSubnets"
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${SharedResourceStack}:PublicHttpIngressSecurityGroup"

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Sub "${SharedResourceStack}:VPC"

Outputs:
  Url:
    Description: Workshop application URL
    Value:
      Fn::Sub: 'http://${LoadBalancer.DNSName}'
  DeploymentGroup:
    Description: Workshop application deployment group
    Value: !Ref DeploymentGroup
